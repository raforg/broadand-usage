#!/usr/bin/env perl
use warnings;
use strict;

# broadband-usage - Home broadband usage meter for SNMP-enabled modem/routers
#
# Copyright (C) 2006 raf <raf@raf.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# or visit http://www.gnu.org/copyleft/gpl.html
#
# 20060122 raf <raf@raf.org>

=head1 NAME

I<broadband-usage> - Home broadband usage meter for SNMP-enabled modem/routers

=head1 SYNOPSIS

 usage: broadband-usage [options]
 options:
  -h           - Print this message then exit.
  -V           - Print the version then exit.
  -M           - Print the manpage then exit
  -W           - Print the manpage in html format then exit
  -R           - Print the manpage in nroff format then exit
  -l /logdir   - Override log directory (default: $logdir)
  -r router    - Override router hostname/glob (default: $router)
  -i #         - Override interface number/glob (default: $iface)
  -o ####-#### - Override off-peak time period (default: none)
  -g           - Report GiB (1024^3 bytes, rather than 1000^3)
  -u           - Include uploads (i.e. outgoing traffic) in total
  -n           - Don't interpolate gaps caused by router reboots
  -w           - Support 64-bit counters (runs more slowly)

=head1 DESCRIPTION

This program reports modem/router statistics that have been collected
by I<broadband-usage-log(1)>. See it's manpage for more details.
Reporting is by calendar month, separates peak from off-peak usage,
handles modem/router reboots, uptime overflow and byte counter
overflow (within reason).

=head1 CAVEAT

The last second of each month is not counted. If that's a problem, copy the
first line of one month's log file onto the end of the previous month's log
file:

 $ cd /var/log/broadband
 $ head -1 200601.router.2 >> 200512.router.2

=head1 SEE ALSO

I<broadband-usage-log(1)>

=head1 AUTHOR

20060122 raf <raf@raf.org>

=head1 URL

C<http://raf.org/broadband-usage/>

=cut

my $version = 0.1;
my $logdir = $ENV{BROADBAND_LOG} || '/var/log/broadband';
my $router = '*';
my $iface = '*';
my $offpeak;

sub help
{
	print << "END";
usage: broadband-usage [options]
options:
  -h           - Print this message then exit.
  -V           - Print the version then exit.
  -M           - Print the manpage then exit
  -W           - Print the manpage in html format then exit
  -R           - Print the manpage in nroff format then exit
  -l /logdir   - Override log directory (default: $logdir)
  -r router    - Override router hostname/glob (default: $router)
  -i #         - Override interface number/glob (default: $iface)
  -o ####-#### - Override off-peak time period (default: none)
  -g           - Report GiB (1024^3 bytes, rather than 1000^3)
  -u           - Include uploads (i.e. outgoing traffic) in total
  -n           - Don't interpolate gaps caused by router reboots
  -w           - Support 64-bit counters (runs much more slowly)

Home broadband usage meter for SNMP-enabled modem/routers:
This program reports modem/router statistics that have been collected
by broadband-usage-log. See it's -h option for more details.
Reporting is by calendar month, separates peak from off-peak usage,
handles modem/router reboots, uptime overflow and byte counter
overflow (within reason).
END
}

sub man
{
	my $noquotes = (`pod2man -h 2>&1` =~ /--quotes=/) ? '--quotes=none' : '';
	system "pod2man $noquotes $0 | nroff -man | " . ($ENV{PAGER} || 'more');
}

sub nroff
{
	my $noquotes = (`pod2man -h 2>&1` =~ /--quotes=/) ? '--quotes=none' : '';
	system "pod2man $noquotes $0";
}

sub html
{
	system "pod2html --noindex $0";
	unlink glob 'pod2htm*';
}

my %opt;
use Getopt::Std;
help, exit if !getopts('hVMWRl:r:i:o:gunw', \%opt) || exists $opt{h};
print("broadband-usage-$version\n"), exit if exists $opt{V};
man, exit if exists $opt{M};
html, exit if exists $opt{W};
nroff, exit if exists $opt{R};
$logdir = $opt{l} if exists $opt{l};
$router = $opt{r} if exists $opt{r};
$iface = $opt{i} if exists $opt{i};
$offpeak = $opt{o} if exists $opt{o};
my $multiplier = (exists $opt{g}) ? 1024 : 1000;
my $notation = (exists $opt{g}) ? 'i' : '';
my $both = exists $opt{u};
my $interpolate = !exists $opt{n};
my $wide = exists $opt{w};
die "$logdir is not a readable directory\n" unless -r $logdir && -d $logdir;
die "$offpeak is not a valid time period\n" if defined $offpeak && $offpeak !~ /^((?:[01][0-9]|2[0-3])[0-5][0-9])-((?:[01][0-9]|2[0-3])[0-5][0-9]|2400)$/;
my ($offpeak_start, $offpeak_finish) = ($1, $2) if defined $offpeak;
$offpeak_finish = '2400' if defined $offpeak && $offpeak_finish eq '0000';
$offpeak = undef if defined $offpeak && $offpeak_start eq '0000' && $offpeak_finish eq '2400';
my $offpeak_midnight = ($offpeak_start lt $offpeak_finish) ? 0 : 1 if defined $offpeak;
use Math::BigInt lib => 'GMP';
sub bigint { new Math::BigInt shift }

for my $log (glob "$logdir/[0-9][0-9][0-9][0-9][0-9][0-9].$router.$iface")
{
	my ($last_in, $last_out, $last_up, $last_time);
	my $pstat = { in => 0, out => 0, reboots => 0, timelost => 0 };
	my $ostat = { in => 0, out => 0, reboots => 0, timelost => 0 };

	open LOG, '<', $log or die "Failed to open $log for reading: $!\n";

	while (<LOG>)
	{
		my ($t, $u, $i, $o) = $_ =~ /^\d{8}(\d{6}) (\d+) (\d+) (\d+)$/ or die "$0: $log: Invalid format: $_";
		my $stat = (defined $offpeak && offpeak($t)) ? $ostat : $pstat;
		$last_time = $t unless defined $last_time;
		$last_in = $i unless defined $last_in;
		$last_out = $o unless defined $last_out;
		$last_up = $u unless defined $last_up;
		$stat->{in} += bytes($last_in, $i, $last_up, $u, $last_time, $t, $stat);
		$stat->{out} += bytes($last_out, $o, $last_up, $u, $last_time, $t);
		$last_time = $t, $last_in = $i, $last_out = $o, $last_up = $u;
	}

	close LOG;
	output($log, $pstat, (defined $offpeak) ? ' peak' : '');
	output($log, $ostat, ' off-peak') if defined $offpeak;
}

sub offpeak
{
	my $time = substr shift, 0, 4;
	return $time gt $offpeak_start || $time le $offpeak_finish if $offpeak_midnight;
	return $time gt $offpeak_start && $time le $offpeak_finish;
}

sub bytes
{
	sub num { $wide ? bigint shift : shift }
	my $prev_bytes = num shift;
	my $curr_bytes = num shift;
	my ($prev_up, $curr_up, $prev_time, $curr_time, $stat) = @_;
	# Normal operation: No reboot (probably) and no byte counter overflow
	return $curr_bytes - $prev_bytes if $curr_bytes >= $prev_bytes;
	# Byte counter overflow (with or without uptime overflow)
	my $interval = interval($prev_time, $curr_time);
	return ($wide && $prev_bytes > 4294967295 ? num('18446744073709551616') : 4294967296) - $prev_bytes + $curr_bytes
		if $curr_up > $prev_up || abs($prev_up + $interval - 4294967295 - $curr_up) <= 1000;
	# Reboot (loss of data, record it, interpolate or not)
	++$stat->{reboots}, $stat->{timelost} += ($interval - $curr_up) / 100 if defined $stat;
	return int(($curr_bytes * $interval) / $curr_up) if $interpolate && $curr_up;
	return $curr_bytes;
}

sub interval
{
	my ($prev_time, $curr_time) = @_;
	my ($ph, $pm, $ps) = $prev_time =~ /^(\d{2})(\d{2})(\d{2})$/;
	my ($ch, $cm, $cs) = $curr_time =~ /^(\d{2})(\d{2})(\d{2})$/;
	s/^0// for $ph, $pm, $ps, $ch, $cm, $cs;
	my $p = ($ph * 60 + $pm) * 60 + $ps;
	my $c = ($ch * 60 + $cm) * 60 + $ps;
	$c += 24 * 60 * 60 if $c < $p;
	return ($c - $p) * 100;
}

sub elapsed
{
	my $elapsed = shift;
	my $days = int($elapsed / 86400); $elapsed -= $days * 86400;
	my $hours = int($elapsed / 3600); $elapsed -= $hours * 3600;
	my $minutes = int($elapsed / 60); $elapsed -= $minutes * 60;
	my $seconds = sprintf '%.2f', $elapsed; $seconds =~ s/\.00$//;
	$elapsed = "${days}d${hours}h${minutes}m${seconds}s";
	$elapsed =~ s/^0d//, $elapsed =~ s/^0h//, $elapsed =~ s/^0m//;
	$elapsed =~ s/m0s$/m/, $elapsed =~ s/h0m$/h/, $elapsed =~ s/d0h$/d/;
	return $elapsed;
}

sub output
{
	my ($log, $stat, $caption) = @_;
	my ($monthstamp, $rt, $if) = $log =~ /\/(\d{6})\.(.*)\.(\d+)$/;
	my $total = $both ? $stat->{in} + $stat->{out} : $stat->{in};
	sub numify { $wide ? shift->numify() : shift }
	my $kb = numify($total) / $multiplier;
	my $mb = $kb / $multiplier;
	my $gb = $mb / $multiplier;
	my $friendly = ($gb >= 1) ? sprintf('(%gG%sB)', $gb, $notation) : ($mb > 1) ? sprintf('(%gM%sB)', $mb, $notation) : ($kb > 1) ? sprintf('(%gK%sB)', $kb, $notation) : '';
	$friendly .= " [$stat->{reboots} restart" . ($stat->{reboots} == 1 ? '' : 's') . ", " . elapsed($stat->{timelost}) . " " . ($interpolate ? 'interpolated' : 'lost') . "]" if $stat->{reboots};
	print "$monthstamp.$rt.$if in=$stat->{in} out=$stat->{out} total=$total $friendly$caption\n";
}

# vi:set ts=4 sw=4:
